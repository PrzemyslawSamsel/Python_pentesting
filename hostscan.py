#!/bin/python3

import nmap
import csv
from termcolor import colored
import sys
import random
from threading import Thread
from time import sleep
import os

#function changes colour of string for print()
def c(string,colour='green'):
	return colored(string,colour)

#Get results of nmap scan
def result(nm):
	print('RESULTS: \n')
	#Get scanned host ip address
	host = nm.all_hosts()[0]
	print('-'*50)
	#Print basic information
	print(c('Host :'), host,"\t", nm[host].hostname())
	print(c('State : '), nm[host].state())
	#If fullscan (option -O) then print OS info
	if 'osmatch' in nm[host]:
		print(c('OS: '),nm[host]['osmatch'][0]['name'], '(Acc: ',nm[host]['osmatch'][0]['accuracy'],'%)')
		print(c("Class: "), nm[host]['osmatch'][0]['osclass'][0])

	#Short output - table
	#Iterate through protocols identified by the scan
	for proto in nm[host].all_protocols():
		print('-'*50)
		print('Protocol : %s' % proto)
		lport = nm[host][proto].keys()
		sorted(lport)

		for port in lport:
			lstate = nm[host][proto][port]['state']
			lname = nm[host][proto][port]['name']
			print (c('port: '),port,c('\tstate: '),lstate,c('\tname: ',),lname)

	print('-'*50)


	answer = input('Want to print entire table? (yes/no): ')

	# Writing output to a file
	nm_out = open('nm_out.csv','w')
	nm_out.write(nm.csv())
	nm_out.close()


	#Printing entire table of results
	if answer == 'yes' or answer == 'y' or answer == 'Y' or answer == 'ye':
		#Printing CSV results in a table
		print('\n\n','-'*200,'\n','-'*200)
		with open('nm_out.csv') as f:
			reader = csv.reader(f,delimiter=';')
			line = '{:<15} '*12
			for num,row in enumerate(reader):
				if num == 0:
					print(c(line.format(*row),'green'))
				else:
					row_short = []
					for x in row:
						if len(x) > 15:
							row_short.append('|'+ x[:14])
						else:
							row_short.append('|'+x)
					print(line.format(*row_short))

		print('\n\n','-'*200,'\n','-'*200)
#

def nmap_thread(nm_scanner):
	nm_scanner.scan(hosts=sys.argv[1],arguments=nm_args)
#

if __name__ == "__main__":

	#Check whether all args were supplied
	if len(sys.argv) == 1 or len(sys.argv)!=3:
		print("usage: ./hostscan.py <target_ip> fast/full")
		exit()

	"""
	NMAP ARGS (provided if you want to customize scans)
	-sV 		: Probe open ports to determine service/version info
	--version-intensity : Set from 0 (light) to 9 (try all probes)
	-O  		: Enable OS detection
	-sS/sT/sA/sW/sM : TCP SYN/Connect()/ACK/Window/Maimon scans
	-sU 		: UDP Scan
	-sN/sF/sX 	: TCP Null, FIN, and Xmas scans
	-sO 		: IP protocol scan
	- A 		: Enable OS detection, ver detection, script scan, & tracerout
	"""

	#Check whether all args were supplied
	if sys.argv[2] == 'fast':
		nm_args = '-T4 -A -O'
	elif sys.argv[2] == 'full':
		nm_args = '-sV -A -T4 -sS -O -p-'
	else:
		print("usage: ./hostscan.py <target_ip> fast (5 mins) / full (40+ mins)")
		exit()

	#Starting scanning thread
	nm = nmap.PortScanner()
	nmap_thread = Thread(target=nmap_thread, args=(nm,))
	nmap_thread.start()

	progress = 0
	#Waiting till it finish
	while nmap_thread.isAlive() == True:
		print("Nmap in progress: ","[",end="")
		print("-"*progress,">",(20-progress)*' ',']')
		progress+=1
		progress=progress%20
		sleep(1)
		_=os.system("clear")

	#Thread synchronization
	nmap_thread.join()
	#printing results of scan
	result(nm)
#
